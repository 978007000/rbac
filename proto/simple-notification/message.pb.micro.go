// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: simple-notification/message.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	calling "github.com/onskycloud/rbac/proto/calling"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NotificationSvc service

type NotificationSvcService interface {
	// send notification request to call & sms
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*calling.Response, error)
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...client.CallOption) (*GetNotificationResponse, error)
}

type notificationSvcService struct {
	c    client.Client
	name string
}

func NewNotificationSvcService(name string, c client.Client) NotificationSvcService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "notificationsvc"
	}
	return &notificationSvcService{
		c:    c,
		name: name,
	}
}

func (c *notificationSvcService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*calling.Response, error) {
	req := c.c.NewRequest(c.name, "NotificationSvc.Create", in)
	out := new(calling.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationSvcService) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...client.CallOption) (*GetNotificationResponse, error) {
	req := c.c.NewRequest(c.name, "NotificationSvc.GetNotification", in)
	out := new(GetNotificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotificationSvc service

type NotificationSvcHandler interface {
	// send notification request to call & sms
	Create(context.Context, *Request, *calling.Response) error
	GetNotification(context.Context, *GetNotificationRequest, *GetNotificationResponse) error
}

func RegisterNotificationSvcHandler(s server.Server, hdlr NotificationSvcHandler, opts ...server.HandlerOption) error {
	type notificationSvc interface {
		Create(ctx context.Context, in *Request, out *calling.Response) error
		GetNotification(ctx context.Context, in *GetNotificationRequest, out *GetNotificationResponse) error
	}
	type NotificationSvc struct {
		notificationSvc
	}
	h := &notificationSvcHandler{hdlr}
	return s.Handle(s.NewHandler(&NotificationSvc{h}, opts...))
}

type notificationSvcHandler struct {
	NotificationSvcHandler
}

func (h *notificationSvcHandler) Create(ctx context.Context, in *Request, out *calling.Response) error {
	return h.NotificationSvcHandler.Create(ctx, in, out)
}

func (h *notificationSvcHandler) GetNotification(ctx context.Context, in *GetNotificationRequest, out *GetNotificationResponse) error {
	return h.NotificationSvcHandler.GetNotification(ctx, in, out)
}
