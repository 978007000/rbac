// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: customer/calling/proto/message.proto

package calling

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SecurityCallingSvc service

type SecurityCallingSvcService interface {
	// send notification request to call & sms
	SendRequest(ctx context.Context, in *CallingRequest, opts ...client.CallOption) (*CallingResponse, error)
	// // handle security mode & safety mode
	StopCalling(ctx context.Context, in *ModeRequest, opts ...client.CallOption) (*Response, error)
	// // get quota used by customer, client, gateway
	GetQuota(ctx context.Context, in *QuotaRequest, opts ...client.CallOption) (*QuotaResponse, error)
	// // using voice api in another service can response XML content
	// rpc Voice(VoiceRequest) returns(VoiceResponse) { }
	// // update call status
	UpdateCall(ctx context.Context, in *UpdateCallRequest, opts ...client.CallOption) (*Response, error)
	// // update message status
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...client.CallOption) (*Response, error)
	//  | TODO: using graphQL
	// // get notifications list
	// rpc GetNotifications(CallingRequest) returns(CallingResponse) { }
	// // get call list
	// rpc GetCalls(CallingRequest) returns(CallingResponse) { }
	// // get message list
	// rpc GetMessages(CallingRequest) returns(CallingResponse) { }
	// // get notification detail
	GetNotification(ctx context.Context, in *NotificationRequest, opts ...client.CallOption) (*NotificationResponse, error)
}

type securityCallingSvcService struct {
	c    client.Client
	name string
}

func NewSecurityCallingSvcService(name string, c client.Client) SecurityCallingSvcService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "customer.micro.srv.security.calling"
	}
	return &securityCallingSvcService{
		c:    c,
		name: name,
	}
}

func (c *securityCallingSvcService) SendRequest(ctx context.Context, in *CallingRequest, opts ...client.CallOption) (*CallingResponse, error) {
	req := c.c.NewRequest(c.name, "SecurityCallingSvc.SendRequest", in)
	out := new(CallingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCallingSvcService) StopCalling(ctx context.Context, in *ModeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SecurityCallingSvc.StopCalling", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCallingSvcService) GetQuota(ctx context.Context, in *QuotaRequest, opts ...client.CallOption) (*QuotaResponse, error) {
	req := c.c.NewRequest(c.name, "SecurityCallingSvc.GetQuota", in)
	out := new(QuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCallingSvcService) UpdateCall(ctx context.Context, in *UpdateCallRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SecurityCallingSvc.UpdateCall", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCallingSvcService) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SecurityCallingSvc.UpdateMessage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCallingSvcService) GetNotification(ctx context.Context, in *NotificationRequest, opts ...client.CallOption) (*NotificationResponse, error) {
	req := c.c.NewRequest(c.name, "SecurityCallingSvc.GetNotification", in)
	out := new(NotificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecurityCallingSvc service

type SecurityCallingSvcHandler interface {
	// send notification request to call & sms
	SendRequest(context.Context, *CallingRequest, *CallingResponse) error
	// // handle security mode & safety mode
	StopCalling(context.Context, *ModeRequest, *Response) error
	// // get quota used by customer, client, gateway
	GetQuota(context.Context, *QuotaRequest, *QuotaResponse) error
	// // using voice api in another service can response XML content
	// rpc Voice(VoiceRequest) returns(VoiceResponse) { }
	// // update call status
	UpdateCall(context.Context, *UpdateCallRequest, *Response) error
	// // update message status
	UpdateMessage(context.Context, *UpdateMessageRequest, *Response) error
	//  | TODO: using graphQL
	// // get notifications list
	// rpc GetNotifications(CallingRequest) returns(CallingResponse) { }
	// // get call list
	// rpc GetCalls(CallingRequest) returns(CallingResponse) { }
	// // get message list
	// rpc GetMessages(CallingRequest) returns(CallingResponse) { }
	// // get notification detail
	GetNotification(context.Context, *NotificationRequest, *NotificationResponse) error
}

func RegisterSecurityCallingSvcHandler(s server.Server, hdlr SecurityCallingSvcHandler, opts ...server.HandlerOption) error {
	type securityCallingSvc interface {
		SendRequest(ctx context.Context, in *CallingRequest, out *CallingResponse) error
		StopCalling(ctx context.Context, in *ModeRequest, out *Response) error
		GetQuota(ctx context.Context, in *QuotaRequest, out *QuotaResponse) error
		UpdateCall(ctx context.Context, in *UpdateCallRequest, out *Response) error
		UpdateMessage(ctx context.Context, in *UpdateMessageRequest, out *Response) error
		GetNotification(ctx context.Context, in *NotificationRequest, out *NotificationResponse) error
	}
	type SecurityCallingSvc struct {
		securityCallingSvc
	}
	h := &securityCallingSvcHandler{hdlr}
	return s.Handle(s.NewHandler(&SecurityCallingSvc{h}, opts...))
}

type securityCallingSvcHandler struct {
	SecurityCallingSvcHandler
}

func (h *securityCallingSvcHandler) SendRequest(ctx context.Context, in *CallingRequest, out *CallingResponse) error {
	return h.SecurityCallingSvcHandler.SendRequest(ctx, in, out)
}

func (h *securityCallingSvcHandler) StopCalling(ctx context.Context, in *ModeRequest, out *Response) error {
	return h.SecurityCallingSvcHandler.StopCalling(ctx, in, out)
}

func (h *securityCallingSvcHandler) GetQuota(ctx context.Context, in *QuotaRequest, out *QuotaResponse) error {
	return h.SecurityCallingSvcHandler.GetQuota(ctx, in, out)
}

func (h *securityCallingSvcHandler) UpdateCall(ctx context.Context, in *UpdateCallRequest, out *Response) error {
	return h.SecurityCallingSvcHandler.UpdateCall(ctx, in, out)
}

func (h *securityCallingSvcHandler) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, out *Response) error {
	return h.SecurityCallingSvcHandler.UpdateMessage(ctx, in, out)
}

func (h *securityCallingSvcHandler) GetNotification(ctx context.Context, in *NotificationRequest, out *NotificationResponse) error {
	return h.SecurityCallingSvcHandler.GetNotification(ctx, in, out)
}
